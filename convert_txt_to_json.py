import os
import json
import re
from datetime import datetime

def load_transcript_lines(txt_path):
    with open(txt_path, 'r', encoding='utf-8') as f:
        lines = f.readlines()

    transcript_segments = []
    for line in lines:
        match = re.match(r"^(\d+)\s+(.+)", line.strip())
        if match:
            start, sentence = match.groups()
            transcript_segments.append({
                "start": int(start),
                "text": sentence
            })
    return transcript_segments

def generate_formatted_content(segments):
    return "".join(
        f"<text start='{seg['start']}'>{seg['text']}</text>"
        for seg in segments
    )

def build_video_json(transcript_segments, metadata):
    formatted_content = generate_formatted_content(transcript_segments)
    return [
        {
            "VideoURL": metadata["VideoURL"],
            "Video_title": metadata["Video_title"],
            "Description": metadata["Description"],
            "Channel_Name": metadata["Channel_Name"],
            "Views": metadata["Views"],
            "Runtime": metadata["Runtime"],
            "published_Date": metadata["published_Date"],
            "transcript": {
                "hasTranscript": True,
                "format": "cleaned",
                "language": "hi",
                "isTranslated": False,
                "isAutoGenerated": False,
                "segmentCount": len(transcript_segments),
                "formattedContent": formatted_content
            }
        }
    ]

def convert_single_file(txt_path, output_path, metadata):
    transcript_segments = load_transcript_lines(txt_path)
    video_data = build_video_json(transcript_segments, metadata)

    with open(output_path, 'w', encoding='utf-8') as f:
        json.dump(video_data, f, ensure_ascii=False, indent=2)

    print(f"✅ Converted and saved: {output_path}")

def load_metadata(metadata_path):
    with open(metadata_path, "r", encoding="utf-8") as f:
        data = json.load(f)

    # Strip `.json` and lowercase keys
    return {
        entry["video_id"].replace(".json", "").lower(): entry
        for entry in data
    }

def convert_folder(input_folder, output_folder, metadata_path):
    if not os.path.exists(output_folder):
        os.makedirs(output_folder)

    metadata_dict = load_metadata(metadata_path)

    for txt_file in os.listdir(input_folder):
        if txt_file.endswith(".txt"):
            video_id = os.path.splitext(txt_file)[0].lower()
            metadata = metadata_dict.get(video_id)

            if metadata is None:
                print(f"⚠️ Skipping {video_id}: Metadata not found")
                continue

            txt_path = os.path.join(input_folder, txt_file)
            output_filename = f"{video_id}.json"
            output_path = os.path.join(output_folder, output_filename)

            convert_single_file(txt_path, output_path, metadata)

def main():
    input_folder = "first_clean"              # Folder containing .txt transcripts
    output_folder = "converted_json"              # Output folder for JSONs
    metadata_file = "metaData.json"               # JSON file with video metadata

    convert_folder(input_folder, output_folder, metadata_file)

if __name__ == "__main__":
    main()
