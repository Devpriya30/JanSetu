#!/usr/bin/env python3
"""
Bulk YouTube JSON Uploader

This script iterates over all JSON files in a given folder and uploads them to MongoDB
using the YouTubeToMongoUploader class from youtube_uploader.py.

Usage:
    python bulk_youtube_mongo.py converted_json/
"""

import sys
import os
import argparse
from pathlib import Path
from collections import defaultdict
import re

# Import your existing uploader class
from youtube_mongo import YouTubeToMongoUploader

def main():
    parser = argparse.ArgumentParser(description="Bulk upload all YouTube JSON files in a folder to MongoDB.")
    parser.add_argument("folder_path", help="Path to folder containing YouTube JSON files")
    parser.add_argument("--database", default="youtube_data", help="MongoDB database name (default: youtube_data)")
    args = parser.parse_args()

    folder_path = Path(args.folder_path)

    if not folder_path.exists() or not folder_path.is_dir():
        print(f"‚ùå Error: Provided path '{folder_path}' is not a valid directory.")
        sys.exit(1)

    # Initialize uploader once
    try:
        uploader = YouTubeToMongoUploader(database_name=args.database)
    except Exception as e:
        print(f"‚ùå Failed to initialize uploader: {e}")
        sys.exit(1)

    json_files = list(folder_path.glob("*.json"))

    if not json_files:
        print(f"‚ö†Ô∏è No JSON files found in folder: {folder_path}")
        sys.exit(0)

    print(f"üìÇ Found {len(json_files)} JSON files in '{folder_path}'. Starting upload...\n")

    total_stats = {"processed": 0, "inserted": 0, "updated": 0, "errors": 0}

    # Group files by base ID (excluding _partX)
    grouped_files = defaultdict(list)
    pattern = re.compile(r"^(.*?)(_part\d+)?\.json$")

    for file_path in json_files:
        match = pattern.match(file_path.name.lower())
        if match:
            base_name = match.group(1)
            grouped_files[base_name].append(file_path)

    for base_id, parts in grouped_files.items():
        print(f"\n‚û°Ô∏è Processing: {base_id} ({len(parts)} part(s))")

        try:
            # Sort parts: part1, part2, ... or original file
            parts.sort(key=lambda p: int(re.search(r"part(\d+)", p.stem).group(1)) if "part" in p.stem else 0)

            combined_video = None

            for file_path in parts:
                video_data = uploader.load_json_file(str(file_path))
                if not video_data:
                    continue
                if not isinstance(video_data, list):
                    video_data = [video_data]
                video = video_data[0]

                if combined_video is None:
                    combined_video = video
                else:
                    # Merge transcript.formattedContent
                    if "transcript" in video and "formattedContent" in video["transcript"]:
                        combined_video["transcript"]["formattedContent"] += video["transcript"]["formattedContent"]
                        # Optional: update segmentCount if desired
                        if "segmentCount" in combined_video["transcript"] and "segmentCount" in video["transcript"]:
                            combined_video["transcript"]["segmentCount"] += video["transcript"]["segmentCount"]

            if combined_video:
                # Ensure transcript metadata is set for downstream processor
                combined_video["transcript"]["hasTranscript"] = True
                combined_video["transcript"]["format"] = "cleaned"
                combined_video["transcript"]["language"] = "hi"
                combined_video["transcript"]["isTranslated"] = False
                combined_video["transcript"]["isAutoGenerated"] = False

                # Upload
                stats = uploader.upload_videos([combined_video])
                for key in total_stats:
                    total_stats[key] += stats.get(key, 0)
                total_stats["processed"] += 1

        except Exception as e:
            print(f"‚ùå Failed to process {base_id}: {e}")
            total_stats["errors"] += 1

    print("\n‚úÖ Bulk Upload Summary:")
    print(f"  Processed files: {len(json_files)}")
    print(f"  Videos processed: {total_stats['processed']}")
    print(f"  Inserted: {total_stats['inserted']}")
    print(f"  Updated: {total_stats['updated']}")
    print(f"  Errors: {total_stats['errors']}")

if __name__ == "__main__":
    main()
